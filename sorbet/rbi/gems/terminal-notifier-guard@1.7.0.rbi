# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `terminal-notifier-guard` gem.
# Please instead update this file by running `bin/tapioca gem terminal-notifier-guard`.

# source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#1
module TerminalNotifier; end

# source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#2
module TerminalNotifier::Guard
  private

  # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#95
  def failed(message, options = T.unsafe(nil), verbose = T.unsafe(nil)); end

  # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#113
  def icon(type = T.unsafe(nil)); end

  # If a ‘group’ ID is given, and a notification for that group exists,
  # returns a hash with details about the notification.
  #
  # If no ‘group’ ID is given, an array of hashes describing all
  # notifications.
  #
  # If no information is available this will return `nil`.
  #
  # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#139
  def list(group = T.unsafe(nil), verbose = T.unsafe(nil)); end

  # Sends a User Notification and returns wether or not it was a success.
  #
  # The available options are `:title`, `:group`, `:activate`, `:open`, and
  # `:execute`. For a description of each option see:
  #
  #   https://github.com/alloy/terminal-notifier/blob/master/README.markdown
  #
  # Examples are:
  #
  #   TerminalNotifier::Guard.notify('Hello World')
  #   TerminalNotifier::Guard.notify('Hello World', :title => 'Ruby')
  #   TerminalNotifier::Guard.notify('Hello World', :group => Process.pid)
  #   TerminalNotifier::Guard.notify('Hello World', :activate => 'com.apple.Safari')
  #   TerminalNotifier::Guard.notify('Hello World', :open => 'http://twitter.com/alloy')
  #   TerminalNotifier::Guard.notify('Hello World', :execute => 'say "OMG"')
  #
  # Raises if not supported on the current platform.
  #
  # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#89
  def notify(message, options = T.unsafe(nil), verbose = T.unsafe(nil)); end

  # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#101
  def pending(message, options = T.unsafe(nil), verbose = T.unsafe(nil)); end

  # Removes a notification that was previously sent with the specified
  # ‘group’ ID, if one exists.
  #
  # If no ‘group’ ID is given, all notifications are removed.
  #
  # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#124
  def remove(group = T.unsafe(nil), verbose = T.unsafe(nil)); end

  # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#107
  def success(message, options = T.unsafe(nil), verbose = T.unsafe(nil)); end

  class << self
    # Returns wether or not the current platform is Mac OS X 10.8, or higher.
    #
    # @return [Boolean]
    #
    # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#30
    def available?; end

    # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#44
    def bin_path; end

    # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#19
    def deprecation_check; end

    # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#50
    def execute(verbose, options); end

    # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#95
    def failed(message, options = T.unsafe(nil), verbose = T.unsafe(nil)); end

    # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#113
    def icon(type = T.unsafe(nil)); end

    # Whether or not the terminal notifier is installed
    #
    # @return [Boolean]
    #
    # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#40
    def installed?; end

    # If a ‘group’ ID is given, and a notification for that group exists,
    # returns a hash with details about the notification.
    #
    # If no ‘group’ ID is given, an array of hashes describing all
    # notifications.
    #
    # If no information is available this will return `nil`.
    #
    # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#139
    def list(group = T.unsafe(nil), verbose = T.unsafe(nil)); end

    # Sends a User Notification and returns wether or not it was a success.
    #
    # The available options are `:title`, `:group`, `:activate`, `:open`, and
    # `:execute`. For a description of each option see:
    #
    #   https://github.com/alloy/terminal-notifier/blob/master/README.markdown
    #
    # Examples are:
    #
    #   TerminalNotifier::Guard.notify('Hello World')
    #   TerminalNotifier::Guard.notify('Hello World', :title => 'Ruby')
    #   TerminalNotifier::Guard.notify('Hello World', :group => Process.pid)
    #   TerminalNotifier::Guard.notify('Hello World', :activate => 'com.apple.Safari')
    #   TerminalNotifier::Guard.notify('Hello World', :open => 'http://twitter.com/alloy')
    #   TerminalNotifier::Guard.notify('Hello World', :execute => 'say "OMG"')
    #
    # Raises if not supported on the current platform.
    #
    # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#89
    def notify(message, options = T.unsafe(nil), verbose = T.unsafe(nil)); end

    # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#7
    def osx_version; end

    # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#101
    def pending(message, options = T.unsafe(nil), verbose = T.unsafe(nil)); end

    # Removes a notification that was previously sent with the specified
    # ‘group’ ID, if one exists.
    #
    # If no ‘group’ ID is given, all notifications are removed.
    #
    # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#124
    def remove(group = T.unsafe(nil), verbose = T.unsafe(nil)); end

    # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#107
    def success(message, options = T.unsafe(nil), verbose = T.unsafe(nil)); end

    # source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#11
    def terminal_notifier_version; end
  end
end

# source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#5
TerminalNotifier::Guard::GUARD_ICON = T.let(T.unsafe(nil), String)

# source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#4
TerminalNotifier::Guard::ICONS_PATH = T.let(T.unsafe(nil), String)

# source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#130
TerminalNotifier::Guard::LIST_FIELDS = T.let(T.unsafe(nil), Array)

# source://terminal-notifier-guard//lib/terminal-notifier-guard.rb#3
TerminalNotifier::Guard::VERSION = T.let(T.unsafe(nil), String)
